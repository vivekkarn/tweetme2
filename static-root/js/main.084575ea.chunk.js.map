{"version":3,"sources":["lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/components.js","serviceWorker.js","index.js"],"names":["backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","onerror","event","console","log","message","send","ActionBtn","props","tweet","action","didperformAction","likes","className","handleActionBackendEvent","display","type","onClick","preventDefault","tweetId","id","apiTweetAction","ParentTweet","og_tweet","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","path","pathname","idRegex","match","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","Fragment","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetDidSet","setTweetDidSet","useEffect","final","newTweets","concat","username","apiTweetList","alert","handleDidRetweet","newTweet","updateTweetsInIt","unshift","updateFinalTweet","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","ref","required","newValue","current","value","TweetDetailComponent","didLookUp","setDidLookUp","setTweet","handleBackendLookup","apiTweetDetail","Boolean","hostname","e","createElement","tweetElement","getElementById","myComponent","setNewTweets","canTweet","tempNewTweets","dataset","ReactDOM","render","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.084575ea.chunk.js","sourcesContent":["function getCookie(name) {\r\n  var cookieValue = null;\r\n  if (document.cookie && document.cookie !== \"\") {\r\n    var cookies = document.cookie.split(\";\");\r\n    for (var i = 0; i < cookies.length; i++) {\r\n      var cookie = cookies[i].trim();\r\n      // Does this cookie string begin with the name we want?\r\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n  let jsonData;\r\n  if (data) {\r\n    jsonData = JSON.stringify(data);\r\n  }\r\n  const xhr = new XMLHttpRequest(); // xhr = SomeClass()\r\n  const url = `http://127.0.0.1:8000/api/${endpoint}`;\r\n  xhr.responseType = \"json\";\r\n  var csrftoken = getCookie(\"csrftoken\");\r\n  xhr.open(method, url);\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n  if (csrftoken) {\r\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\r\n  }\r\n  xhr.onload = function () {\r\n    if (xhr.status === 403) {\r\n      const detail = xhr.response.detail;\r\n      if (detail === \"Authentication credentials were not provided.\") {\r\n        window.location.href = \"/login?showLoginRequired=true\";\r\n      }\r\n    }\r\n    callback(xhr.response, xhr.status);\r\n  };\r\n\r\n  xhr.onerror = function (event) {\r\n    console.log(\"error is \", event);\r\n    callback({ message: \"there was an error\" }, 400);\r\n  };\r\n  xhr.send(jsonData);\r\n}\r\n","import React from \"react\";\r\nimport { apiTweetAction } from \"./lookup\";\r\n\r\nexport function ActionBtn(props) {\r\n  const { tweet, action, didperformAction } = props;\r\n  const likes = tweet.likes ? tweet.likes : 0;\r\n  const className = props.className\r\n    ? props.className\r\n    : \"btn btn-primary btn-sm\";\r\n\r\n  const handleActionBackendEvent = (response, status) => {\r\n    if ((status === 200 || status === 201) && didperformAction) {\r\n      didperformAction(response, status);\r\n    }\r\n  };\r\n  const handleClick = (event) => {\r\n    event.preventDefault();\r\n    apiTweetAction(tweet.id, action.type, handleActionBackendEvent);\r\n  };\r\n\r\n  const display =\r\n    action.type === \"like\" ? `${likes} ${action.display}` : action.display;\r\n\r\n  return (\r\n    <button className={className} onClick={handleClick}>\r\n      {\" \"}\r\n      {display}\r\n    </button>\r\n  );\r\n}\r\n","import { backendLookup } from \"../lookup\";\r\n\r\nexport function apiTweetCreate(newTweet, callback) {\r\n  backendLookup(\"POST\", \"tweets/create\", callback, { content: newTweet });\r\n}\r\n\r\nexport function apiTweetAction(tweetId, action, callback) {\r\n  const data = { id: tweetId, action: action };\r\n  backendLookup(\"POST\", \"tweets/action\", callback, data);\r\n}\r\n\r\nexport function apiTweetDetail(tweetId, callback) {\r\n  backendLookup(\"GET\", `tweets/${tweetId}`, callback);\r\n}\r\n\r\nexport function apiTweetList(username, callback) {\r\n  let endpoint = \"tweets\";\r\n  if (username) {\r\n    endpoint = `tweets/?username=${username}`;\r\n  }\r\n  backendLookup(\"GET\", endpoint, callback);\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { ActionBtn } from \"./buttons\";\r\n\r\nexport function ParentTweet(props) {\r\n  const { tweet } = props;\r\n  return tweet.og_tweet ? (\r\n    <div className=\"row\">\r\n      <div className=\"col-11 mx-auto p-3 border rounded\">\r\n        <p className=\"mb-0 text-muted small\">Retweet</p>\r\n        <Tweet hideActions tweet={tweet.og_tweet} />\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n}\r\n\r\nexport function Tweet(props) {\r\n  const { tweet, didRetweet, hideActions } = props;\r\n  const [actionTweet, setActionTweet] = useState(\r\n    props.tweet ? props.tweet : null\r\n  );\r\n  const className = props.className ? props.className : \"col-10\";\r\n  const action = { type: \"like\", display: \"Likes\" };\r\n\r\n  const path = window.location.pathname;\r\n  const idRegex = /(?<tweetid>\\d+)/;\r\n  const match = path.match(idRegex);\r\n  const urlTweetId = match ? match.groups.tweetid : -1;\r\n\r\n  const isDetail = `${urlTweetId}` === `${tweet.id}`;\r\n\r\n  const handleLink = (event) => {\r\n    event.preventDefault();\r\n    window.location.href = `/${tweet.id}`;\r\n  };\r\n\r\n  const handlePerformAction = (newActionTweet, status) => {\r\n    if (status === 200) {\r\n      setActionTweet(newActionTweet);\r\n    } else if (status === 201) {\r\n      //do something\r\n      if (didRetweet) {\r\n        didRetweet(newActionTweet);\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <div className={className}>\r\n      <div>\r\n        <p>\r\n          {tweet.id} - {tweet.content}\r\n        </p>\r\n        <div>\r\n          <ParentTweet tweet={tweet} />\r\n        </div>\r\n      </div>\r\n      <div className=\"btn btn-group\">\r\n        <div>\r\n          {actionTweet && hideActions !== true && (\r\n            <React.Fragment>\r\n              <ActionBtn\r\n                tweet={actionTweet}\r\n                didperformAction={handlePerformAction}\r\n                action={action}\r\n              />\r\n              <ActionBtn\r\n                tweet={actionTweet}\r\n                didperformAction={handlePerformAction}\r\n                action={{ type: \"unlike\", display: \"Unlike\" }}\r\n              />\r\n              <ActionBtn\r\n                tweet={actionTweet}\r\n                didperformAction={handlePerformAction}\r\n                action={{ type: \"retweet\", display: \"Retweets\" }}\r\n              />\r\n            </React.Fragment>\r\n          )}\r\n\r\n          {isDetail === true ? null : (\r\n            <button\r\n              className=\"btn btn-outline-primary btn-sm\"\r\n              onClick={handleLink}\r\n            >\r\n              View\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { apiTweetList } from \"./lookup\";\r\nimport { Tweet } from \"./detail\";\r\n\r\nexport function TweetsList(props) {\r\n  const [tweetsInit, setTweetsInit] = useState([]);\r\n  const [tweets, setTweets] = useState([]);\r\n  const [tweetDidSet, setTweetDidSet] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const final = [...props.newTweets].concat(tweetsInit);\r\n    if (final.length !== tweets.length) {\r\n      setTweets(final);\r\n    }\r\n  }, [props.newTweets, tweetsInit, tweets]);\r\n\r\n  useEffect(() => {\r\n    if (tweetDidSet === false) {\r\n      const handleTweetListLookup = (response, status) => {\r\n        if (status === 200) {\r\n          setTweetsInit(response);\r\n          setTweetDidSet(true);\r\n        } else {\r\n          alert(\"an error occured.\");\r\n        }\r\n      };\r\n      apiTweetList(props.username, handleTweetListLookup);\r\n    }\r\n  }, [tweetsInit, tweetDidSet, setTweetDidSet, props.username]);\r\n\r\n  const handleDidRetweet = (newTweet) => {\r\n    const updateTweetsInIt = [...tweetsInit];\r\n    updateTweetsInIt.unshift(newTweet);\r\n    setTweetsInit(updateTweetsInIt);\r\n\r\n    const updateFinalTweet = [...tweets];\r\n    updateFinalTweet.unshift(newTweet);\r\n    setTweets(updateFinalTweet);\r\n  };\r\n\r\n  return tweets.map((item, index) => (\r\n    <Tweet\r\n      tweet={item}\r\n      didRetweet={handleDidRetweet}\r\n      key={index}\r\n      className=\"my-10 py-10 mx-auto border bg-white text-dark\"\r\n    />\r\n  ));\r\n}\r\n","import React from \"react\";\r\nimport { apiTweetCreate } from \"./lookup\";\r\n\r\nexport function TweetCreate(props) {\r\n  const textAreaRef = React.createRef();\r\n  const { didTweet } = props;\r\n\r\n  const handleBackendUpdate = (response, status) => {\r\n    if (status === 201) {\r\n      didTweet(response);\r\n    } else {\r\n      console.log(\"An error occured \", response);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const newValue = textAreaRef.current.value;\r\n    apiTweetCreate(newValue, handleBackendUpdate);\r\n    textAreaRef.current.value = \"\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-12 mb-3\">\r\n      <form>\r\n        <textarea\r\n          ref={textAreaRef}\r\n          required={true}\r\n          className=\"form-control\"\r\n          name=\"tweet\"\r\n        ></textarea>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn-primary my-3\"\r\n          onClick={handleSubmit}\r\n        >\r\n          Tweet\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { TweetsList } from \"./list\";\r\nimport { TweetCreate } from \"./create\";\r\nimport { apiTweetDetail } from \"./lookup\";\r\nimport { Tweet } from \"./detail\";\r\n\r\nexport function TweetsComponent(props) {\r\n  const [newTweets, setNewTweets] = useState([]);\r\n  const canTweet = props.canTweet === \"false\" ? false : true;\r\n  let tempNewTweets = [...newTweets];\r\n\r\n  const handleNewTweet = (newTweet) => {\r\n    tempNewTweets.unshift(newTweet);\r\n    setNewTweets(tempNewTweets);\r\n  };\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {canTweet && <TweetCreate didTweet={handleNewTweet} />}\r\n      <TweetsList newTweets={newTweets} {...props} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TweetDetailComponent(props) {\r\n  const { tweetId } = props;\r\n  const [didLookUp, setDidLookUp] = useState(false);\r\n  const [tweet, setTweet] = useState(null);\r\n  const handleBackendLookup = (response, status) => {\r\n    if (status === 200) {\r\n      setTweet(response);\r\n    } else {\r\n      alert(\"There was an error finding the tweet.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (didLookUp === false) {\r\n      apiTweetDetail(tweetId, handleBackendLookup);\r\n      setDidLookUp(true);\r\n    }\r\n  }, [didLookUp, tweetId]);\r\n\r\n  return tweet === null ? null : (\r\n    <Tweet tweet={tweet} className={props.className} />\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n//import App from \"./App\";\nimport { TweetsComponent, TweetDetailComponent } from \"./tweets\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n//ReactDOM.render(<App />, document.getElementById(\"root\"));\n\nconst e = React.createElement;\nconst tweetElement = document.getElementById(\"tweetme-2\");\nif (tweetElement) {\n  const myComponent = e(TweetsComponent, tweetElement.dataset);\n  ReactDOM.render(myComponent, tweetElement);\n}\n\nconst tweetDetailElement = document.querySelectorAll(\".tweetme2-detail\");\ntweetDetailElement.forEach((container) => {\n  ReactDOM.render(e(TweetDetailComponent, container.dataset), container);\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}