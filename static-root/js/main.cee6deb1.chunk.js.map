{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsList","props","useState","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","newTweets","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","a","console","log","message","send","loadTweets","map","item","index","Tweet","tweet","key","className","ActionBtn","action","likes","setLikes","userLike","setuserLike","display","type","onClick","event","preventDefault","id","content","TweetsComponent","textAreaRef","React","createRef","setNewTweets","ref","required","name","newValue","current","value","tempNewTweets","unshift","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","tweetElement","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.cee6deb1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from \"react\";\r\nimport { loadTweets } from \"../lookup\";\r\n\r\nexport function TweetsList(props) {\r\n  const [tweetsInit, setTweetsInit] = useState([]);\r\n  const [tweets, setTweets] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const final = [...props.newTweets].concat(tweetsInit);\r\n    if (final.length !== tweets.length) {\r\n      setTweets(final);\r\n    }\r\n  }, [props.newTweets, tweetsInit, tweets]);\r\n\r\n  useEffect(() => {\r\n    const callback = (response, status) => {\r\n      if (status === 200) {\r\n        setTweetsInit(response);\r\n      }\r\n    };\r\n    loadTweets(callback);\r\n  }, []);\r\n\r\n  return tweets.map((item, index) => (\r\n    <Tweet\r\n      tweet={item}\r\n      key={index}\r\n      className=\"my-5 py-5 border bg-white text-dark\"\r\n    />\r\n  ));\r\n}\r\nexport function ActionBtn(props) {\r\n  const { tweet, action } = props;\r\n  const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0);\r\n  const [userLike, setuserLike] = useState(\r\n    tweet.userLike === true ? true : false\r\n  );\r\n  const className = props.className\r\n    ? props.className\r\n    : \"btn btn-primary btn-sm\";\r\n\r\n  const handleClick = (event) => {\r\n    event.preventDefault();\r\n    if (action.type === \"like\") {\r\n      if (userLike === true) {\r\n        setLikes(likes - 1);\r\n        setuserLike(false);\r\n      } else {\r\n        setLikes(likes + 1);\r\n        setuserLike(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const display =\r\n    action.type === \"like\" ? `${likes} ${action.display}` : action.display;\r\n\r\n  return (\r\n    <button className={className} onClick={handleClick}>\r\n      {\" \"}\r\n      {display}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport function Tweet(props) {\r\n  const { tweet } = props;\r\n  const className = props.className ? props.className : \"col-10\";\r\n  const action = { type: \"like\", display: \"Likes\" };\r\n  return (\r\n    <div className={className}>\r\n      <div>\r\n        {tweet.id} -- {tweet.content}\r\n      </div>\r\n      <div className=\"btn btn-group\">\r\n        <ActionBtn tweet={tweet} action={action} />\r\n        <ActionBtn\r\n          tweet={tweet}\r\n          action={{ type: \"unlike\", display: \"Unlikes\" }}\r\n        />\r\n        <ActionBtn\r\n          tweet={tweet}\r\n          action={{ type: \"retweet\", display: \"Retweets\" }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TweetsComponent(props) {\r\n  const textAreaRef = React.createRef();\r\n  const [newTweets, setNewTweets] = useState([]);\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const newValue = textAreaRef.current.value;\r\n    let tempNewTweets = [...newTweets];\r\n    // unshift pushes at first unlike push\r\n    tempNewTweets.unshift({\r\n      content: newValue,\r\n      likes: 0,\r\n      id: 12345,\r\n    });\r\n    setNewTweets(tempNewTweets);\r\n    textAreaRef.current.value = \"\";\r\n  };\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      <div className=\"col-12 mb-3\">\r\n        <form>\r\n          <textarea\r\n            ref={textAreaRef}\r\n            required={true}\r\n            className=\"form-control\"\r\n            name=\"tweet\"\r\n          ></textarea>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-primary my-3\"\r\n            onClick={handleSubmit}\r\n          >\r\n            Tweet\r\n          </button>\r\n        </form>\r\n      </div>\r\n      <TweetsList newTweets={newTweets} />\r\n    </div>\r\n  );\r\n}\r\n","export function loadTweets(callback) {\r\n  const xhr = new XMLHttpRequest(); // xhr = SomeClass()\r\n  const method = \"GET\";\r\n  const url = \"http://127.0.0.1:8000/api/tweets\";\r\n  const responseType = \"json\";\r\n\r\n  xhr.responseType = responseType;\r\n  xhr.open(method, url);\r\n  xhr.onload = function () {\r\n    callback(xhr.response, xhr.status);\r\n  };\r\n\r\n  xhr.onerror = function (a) {\r\n    //a is something called progressed event.\r\n    console.log(\"error is \", a);\r\n    callback({ message: \"there was an error\" }, 400);\r\n  };\r\n  xhr.send();\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { TweetsComponent } from \"./tweets\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div>\n          <TweetsComponent />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { TweetsComponent } from \"./tweets\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nconst tweetElement = document.getElementById(\"tweetme-2\");\nReactDOM.render(<TweetsComponent />, tweetElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}